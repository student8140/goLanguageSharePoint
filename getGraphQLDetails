package main

import (
    "bytes"
    "encoding/json"
    "fmt"
    "io/ioutil"
    "log"
    "net/http"
)

func main() {
    // Define the GraphQL query
     id := "your-id-value"

    // Define the GraphQL query with the ID variable
    query := fmt.Sprintf(`
        query {
            yourQueryName(id: "%s") {
                field1
                field2
            }
        }
    `, id)
    `
    
    // Create a JSON payload with the query
    payload := map[string]string{
        "query": query,
    }
    payloadBytes, err := json.Marshal(payload)
    if err != nil {
        log.Fatalf("Failed to marshal payload: %v", err)
    }

    // Create a new HTTP request
    req, err := http.NewRequest("POST", "https://your-graphql-endpoint.com/graphql", bytes.NewBuffer(payloadBytes))
    if err != nil {
        log.Fatalf("Failed to create request: %v", err)
    }
    req.Header.Set("Content-Type", "application/json")
    // Add authorization header if required
    req.Header.Set("Authorization", "Bearer your-access-token")

    // Create an HTTP client and send the request
    client := &http.Client{}
    resp, err := client.Do(req)
    if err != nil {
        log.Fatalf("Failed to send request: %v", err)
    }
    defer resp.Body.Close()

    // Read and parse the response
    body, err := ioutil.ReadAll(resp.Body)
    if err != nil {
        log.Fatalf("Failed to read response body: %v", err)
    }

    var result struct {
        Data struct {
            YourQueryName []struct {
                Field1 string `json:"field1"`
                Field2 string `json:"field2"`
            } `json:"yourQueryName"`
        } `json:"data"`
    }
    
    if err := json.Unmarshal(body, &result); err != nil {
        log.Fatalf("Failed to unmarshal response: %v", err)
    }

    // Check the result count
    resultCount := len(result.Data.YourQueryName)
    fmt.Printf("Result count: %d\n", resultCount)

    // Print the response
    for _, item := range result.Data.YourQueryName {
        fmt.Printf("Field1: %s, Field2: %s\n", item.Field1, item.Field2)
    }
}
