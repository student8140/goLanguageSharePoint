package main

import (
	"bytes"
	"encoding/json"
	"fmt"
	"io/ioutil"
	"log"
	"net/http"
)

const (
	jFrogURL      = "https://your-jfrog-url"
	jFrogAPIToken = "your-jfrog-api-token"
)

func createJFrogPermission(permissionName, repoKey, groupName string) error {
	client := &http.Client{}

	permissionData := map[string]interface{}{
		"name": permissionName,
		"repo": map[string]interface{}{
			"include-patterns": []string{"**"},
			"repositories":     []string{repoKey},
		},
		"principals": map[string]interface{}{
			"users":  map[string]interface{}{},
			"groups": map[string]interface{}{groupName: []string{"r", "w"}},
		},
	}
	permissionJSON, err := json.Marshal(permissionData)
	if err != nil {
		return fmt.Errorf("error marshaling JSON: %v", err)
	}

	req, err := http.NewRequest("PUT", fmt.Sprintf("%s/artifactory/api/security/permissions/%s", jFrogURL, permissionName), bytes.NewBuffer(permissionJSON))
	if err != nil {
		return fmt.Errorf("error creating request: %v", err)
	}
	req.Header.Set("Content-Type", "application/json")
	req.Header.Set("Authorization", fmt.Sprintf("Bearer %s", jFrogAPIToken))

	resp, err := client.Do(req)
	if err != nil {
		return fmt.Errorf("error sending request: %v", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		body, _ := ioutil.ReadAll(resp.Body)
		return fmt.Errorf("error response from JFrog: %v, %s", resp.Status, body)
	}

	return nil
}

func main() {
	permissionName := "example-permission"
	repoKey := "example-repo"
	groupName := "example-group"

	err := createJFrogPermission(permissionName, repoKey, groupName)
	if err != nil {
		log.Fatalf("Error creating JFrog permission: %v", err)
	}

	log.Printf("JFrog permission '%s' created successfully for repository '%s' and group '%s'", permissionName, repoKey, groupName)
}
