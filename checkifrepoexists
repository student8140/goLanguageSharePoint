package main

import (
    "encoding/json"
    "fmt"
    "net/http"
    "io/ioutil"
)

const (
    jfrogURL = "https://<your-artifactory-url>/artifactory"
    apiKey   = "<your-api-key>"
    repoKey  = "my-repo"
)

type RepositoryProperties map[string]interface{}

func main() {
    properties, err := getRepositoryProperties(repoKey)
    if err != nil {
        fmt.Println("Error getting repository properties:", err)
        return
    }
    fmt.Println("Repository Properties:")
    for key, value := range properties {
        fmt.Printf("%s: %v\n", key, value)
    }
}

func getRepositoryProperties(repoKey string) (RepositoryProperties, error) {
    url := fmt.Sprintf("%s/api/repositories/%s", jfrogURL, repoKey)
    req, err := http.NewRequest("GET", url, nil)
    if err != nil {
        return nil, err
    }
    req.Header.Set("X-JFrog-Art-Api", apiKey)

    client := &http.Client{}
    resp, err := client.Do(req)
    if err != nil {
        return nil, err
    }
    defer resp.Body.Close()

    if resp.StatusCode != http.StatusOK {
        body, _ := ioutil.ReadAll(resp.Body)
        return nil, fmt.Errorf("unexpected status code: %d, body: %s", resp.StatusCode, string(body))
    }

    var properties RepositoryProperties
    if err := json.NewDecoder(resp.Body).Decode(&properties); err != nil {
        return nil, err
    }

    return properties, nil
}
